# -*- coding: utf-8 -*-
"""
@Author  : Wong Jan Wei

@Time    : 2019-08-25 17:31
@File    : __init__.py.py
@Describe: 
"""

"""
代理通常就是一个介于寻求方和提供方之间的中介系统, 寻求方是发出请求的一方, 而提供方则是根据请求提供资源的一方.
在web世界中, 它相当于代理服务器, 客户端在向网站发出请求时, 首先链接都代理服务器, 然后向他请求诸如网页之类的资源.
代理服务器在内部评估此请求, 将其发送到适当的服务器, 当他收到响应后就会将响应传递给客户端,因此, 代理服务器可以封装请求, 保护隐私,并且非常适合在分布式架构中运行

在设计模式的上下文中, 代理是充当实际对象接口的类, 对象类型可以是多样化的, 例如网络连接, 内存和文件中的大对象, 简而言之, 代理就是封装实际服务对象的包装器或代理人
代理可以为其包装的对象提供附加的功能, 而无需更改对象的代码, 代理模式的主要目的就是为其他对象提供一个代理或者占位符,从而控制对实际对象的访问.

代理模式可用于多中场景, 如下所示:
1. 他能够以更简单的方式表达一个复杂的系统, 例如涉及多个计算或过程的系统应该提供一个更简单的接口,他充当客户端的代理.
2. 他提供了现有的实际对象的安全性, 在许多情况下, 都不允许客户端直接访问实际的对象, 这是因为实际对象可能受到恶意活动的危害, 这时候,代理就能起到抵御恶意活动的盾牌作用,从而保护了实际对象.
3. 他为不同服务器上的远程对象提供本地接口, 一个明显的例子是客户端希望在远程系统上运行某些命令的分布式系统,但是客户端可能没有直接的权限来实现这一点, 因此他将请求转发给本地对象(代理),然后由远程机器上的代理直接该请求
4. 他为消耗大量内存的对象提供一个轻量级的句柄, 有时, 你可能不想加载主要对象,除非他们真的有必要, 这是因为实际对象真的很笨重,可能需要消耗大量资源, 一个典型的例子是网站用户的个人头像, 你最好在列表试图中显示简介头像的缩略图,
当然,为了展示用户简介的详细介绍, 你就需要加载实际图片了.
"""

"""
我们通过一个简单的例子来理解代理模式, 不妨以演员与他的经纪人为例, 当制作公司想要找演员拍电影时,他通常会与经纪人交流.
而不是直接跟演员交流, 经纪人会根据演员的日程安排和其他合约情况,来答复制作公司演员是否有空, 以及是否对该影片感兴趣,
在这种情况下,制片公司并不直接找演员交涉, 而是通过经纪人作为代理,处理所有与演员有关的调度和片酬的问题.
"""
# 根据代理的使用方式,将他们分为一下几种:
# 虚拟代理:
"""
如果一个对象实例化后占用大量的内存, 可以利用占位符来表示,这就是所谓的虚拟代理,例如:你想再网站上加载大型图片
而这个请求需要很长的时间才能加载完成, 通常开发人员将在网页上创建一个占位符图标,以提示我们这里有图像,但是只有当用户
实际点击时才会加载图像,从而节省了向内存存储器中加载大型图像的开销,因此,在虚拟代理中,当客户端请求或访问对象时才会创建实际对象
"""

# 远程代理
"""
远程代理可以表述如下,它位于远程服务器或不同地址空间上的实际对象提供了一个本地表示,例如,你希望为应用程序创建一个监控系统
而该应用涉及对个web服务器,数据库服务器,celery,缓存服务器等,如果我们要监控这些服务器的CPU和磁盘利用率,就需要建立一个对象,该对象能够用于监视应用程序
运行的上下文中,同时还可以执行远程命令以获取实际的参数值,在这种情况下,建立一个作为远程对象的本地表示的远程代理对象将可以帮助我们事先这个目标
"""

# 保护代理
"""
可以通过以下几点加深对保护代理的理解,这种代理能够控制敏感对象的访问,
例如,在当今分布式系统的世界中,web应用会提供多个服务,这些服务相互协作来提供各种功能,现在,在这样的系统中,
认证服务充当负责认证和授权的保护性代理服务器,在这种情况下,代理自然有助于保护网站的核心功能,防止无法识别或未授权的代理访问他们.
因此,代理服务器会检查调用者是否具有转发请求所需的访问权限
"""

# 智能代理
"""
智能代理在访问对象是插入其他操作.
例如,假设在系统中有一个核心组件, 他将状态信息集中保存在一个地点, 通常情况下,这样的组件需要被多个不同的服务器调用以完成他们的任务, 并且可能导致共享资源的问题,
与让服务直接调用核心组件不同, 智能代理是内置的,并且会在访问之前检查实际对象是否被锁定,以确保其他对象可以更改他
"""

